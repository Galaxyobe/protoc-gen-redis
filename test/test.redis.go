// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test/test.proto

package test

import context "context"
import github_com_gomodule_redigo_redis "github.com/gomodule/redigo/redis"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "protoc-gen-redis/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// load Demo from redis by hash type
func (this *Demo) LoadFromRedis(ctx context.Context, key string) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Values(conn.Do("HGETALL", key))
	if err != nil {
		return err
	}

	err = github_com_gomodule_redigo_redis.ScanStruct(data, this.Demo)

	return err
}

// store Demo to redis by one hash key
// field param is full match with original struct name
func (this *Demo) LoadFromRedisByKey(ctx context.Context, key string, field string) (interface{}, error) {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// get by key
	return conn.Do("HGET", key, field)
}

// store Demo to redis by hash type
// Demo will not expire when ttl is 0
func (this *Demo) StoreToRedis(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	fields := make([]interface{}, 0)

	v := reflect.ValueOf(this.Demo)
	if v.IsValid() == false {
		return errors.New("reflect is InValid")
	}

	//找到最后指向的值，或者空指针，空指针是需要进行初始化的
	for v.Kind() == reflect.Ptr && !v.IsNil() {
		v = v.Elem()
	}

	st := v.Type()
	for i := 0; i < v.NumField(); i++ {
		// 判断是否为可导出字段
		if v.Field(i).CanInterface() {
			name := st.FieldByIndex([]int{i}).Name
			if strings.Contains(name, "XXX_") {
				continue
			}
			fields = append(fields, name, v.Field(i).Interface())
		}
	}

	if len(fields) == 0 {
		return errors.New("struct has no fields can export")
	}

	args := make([]interface{}, 0)
	args = append(args, key)
	args = append(args, fields...)

	// set expire
	conn.Send("MULTI")
	conn.Send("HMSET", args...)
	conn.Send("EXPIRE", key, ttl)
	_, err := conn.Do("EXEC")

	return err
}

// store Demo to redis by hash key
// field param is full match with original struct name
// DemoRedis will not expire when ttl is 0
func (this *Demo) StoreToRedisByKey(ctx context.Context, key string, field string, val interface{}, ttl uint64) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// set expire
	conn.Send("MULTI")
	conn.Send("HSET", key, field, val)
	conn.Send("EXPIRE", key, ttl)
	_, err := conn.Do("EXEC")

	return err
}

// store EnabledWithTTL2 to redis
// EnabledWithTTL2 will not expire when ttl is 0
func (this *EnabledWithTTL2) StoreToRedis(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// marshal EnabledWithTTL2 to []byte
	data, err := proto.Marshal(m)
	if err != nil {
		return err
	}

	// use redis string store the EnabledWithTTL2 data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load EnabledWithTTL2 from redis
func (this *EnabledWithTTL2) LoadFromRedis(ctx context.Context, key string) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to Demo
	err = proto.Unmarshal(data, this.Demo)
	if err != nil {
		return err
	}

	return nil
}

// store EnabledWithoutTTL to redis
// EnabledWithoutTTL will not expire when ttl is 0
func (this *EnabledWithoutTTL) StoreToRedis(ctx context.Context, key string) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// marshal EnabledWithoutTTL to []byte
	data, err := proto.Marshal(m)
	if err != nil {
		return err
	}

	// use redis string store the EnabledWithoutTTL data
	_, err = conn.Do("SET", key, data)

	return err
}

// load EnabledWithoutTTL from redis
func (this *EnabledWithoutTTL) LoadFromRedis(ctx context.Context, key string) error {
	// redis conn
	conn := this.rp.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to Demo
	err = proto.Unmarshal(data, this.Demo)
	if err != nil {
		return err
	}

	return nil
}
