// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: string_type.proto

package test

import (
	fmt "fmt"
	math "math"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/galaxyobe/protoc-gen-redis/proto"
	github_com_gomodule_redigo_redis "github.com/gomodule/redigo/redis"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// new StringStorageType redis controller with redis pool
func (m *StringStorageType) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringStorageTypeRedisController {
	return &StringStorageTypeRedisController{
		pool: pool,
		m:    m,
	}
}

// StringStorageType redis controller
type StringStorageTypeRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *StringStorageType
}

// new StringStorageType redis controller with redis pool
func NewStringStorageTypeRedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringStorageTypeRedisController {
	return &StringStorageTypeRedisController{pool: pool, m: new(StringStorageType)}
}

// get StringStorageType
func (r *StringStorageTypeRedisController) StringStorageType() *StringStorageType {
	return r.m
}

// set StringStorageType
func (r *StringStorageTypeRedisController) SetStringStorageType(m *StringStorageType) {
	r.m = m
}

// store StringStorageType to redis string
func (r *StringStorageTypeRedisController) Store(key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringStorageType to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringStorageType data
	_, err = conn.Do("SET", key, data)

	return err
}

// store StringStorageType to redis string with key and ttl expire second
func (r *StringStorageTypeRedisController) StoreWithTTL(key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringStorageType to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringStorageType data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load StringStorageType from redis string
func (r *StringStorageTypeRedisController) Load(key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return proto.Unmarshal(data, r.m)
}

// new StringStorageType2 redis controller with redis pool
func (m *StringStorageType2) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringStorageType2RedisController {
	return &StringStorageType2RedisController{
		pool: pool,
		m:    m,
	}
}

// StringStorageType2 redis controller
type StringStorageType2RedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *StringStorageType2
}

// new StringStorageType2 redis controller with redis pool
func NewStringStorageType2RedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringStorageType2RedisController {
	return &StringStorageType2RedisController{pool: pool, m: new(StringStorageType2)}
}

// get StringStorageType2
func (r *StringStorageType2RedisController) StringStorageType2() *StringStorageType2 {
	return r.m
}

// set StringStorageType2
func (r *StringStorageType2RedisController) SetStringStorageType2(m *StringStorageType2) {
	r.m = m
}

// store StringStorageType2 to redis string
func (r *StringStorageType2RedisController) Store(key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringStorageType2 to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringStorageType2 data
	_, err = conn.Do("SET", key, data)

	return err
}

// store StringStorageType2 to redis string with key and ttl expire second
func (r *StringStorageType2RedisController) StoreWithTTL(key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringStorageType2 to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringStorageType2 data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load StringStorageType2 from redis string
func (r *StringStorageType2RedisController) Load(key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return proto.Unmarshal(data, r.m)
}
