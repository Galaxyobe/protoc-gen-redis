// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: json_codec.proto

package test

import context "context"
import github_com_gomodule_redigo_redis "github.com/gomodule/redigo/redis"
import github_com_json_iterator_go "github.com/json-iterator/go"
import github_com_mitchellh_mapstructure "github.com/mitchellh/mapstructure"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/galaxyobe/protoc-gen-redis/proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// new StringJsonCodec redis controller with redis pool
func (m *StringJsonCodec) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringJsonCodecRedisController {
	return &StringJsonCodecRedisController{
		pool: pool,
		m:    m,
	}
}

// StringJsonCodec redis controller
type StringJsonCodecRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *StringJsonCodec
}

// new StringJsonCodec redis controller with redis pool
func NewStringJsonCodecRedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringJsonCodecRedisController {
	return &StringJsonCodecRedisController{pool: pool}
}

// get StringJsonCodec
func (r *StringJsonCodecRedisController) StringJsonCodec() *StringJsonCodec {
	return r.m
}

// store StringJsonCodec to redis string with context and key
func (r *StringJsonCodecRedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringJsonCodec to []byte
	data, err := github_com_json_iterator_go.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringJsonCodec data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load StringJsonCodec from redis string with context and key
func (r *StringJsonCodecRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return github_com_json_iterator_go.Unmarshal(data, r.m)
}

// new HashJsonCodec redis controller with redis pool
func (m *HashJsonCodec) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *HashJsonCodecRedisController {
	return &HashJsonCodecRedisController{
		pool: pool,
		m:    m,
	}
}

// HashJsonCodec redis controller
type HashJsonCodecRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *HashJsonCodec
}

// new HashJsonCodec redis controller with redis pool
func NewHashJsonCodecRedisController(pool *github_com_gomodule_redigo_redis.Pool) *HashJsonCodecRedisController {
	return &HashJsonCodecRedisController{pool: pool}
}

// get HashJsonCodec
func (r *HashJsonCodecRedisController) HashJsonCodec() *HashJsonCodec {
	return r.m
}

// load HashJsonCodec from redis hash with context and key
func (r *HashJsonCodecRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis hash
	data, err := github_com_gomodule_redigo_redis.ByteSlices(conn.Do("HGETALL", key))
	if err != nil {
		return err
	}

	// parse redis hash field name and value
	structure := make(map[string]interface{})
	for i := 0; i < len(data); i += 2 {
		switch string(data[i]) {
		case "HashJsonCodec":
			// unmarshal HashJsonCodec
			r.m.HashJsonCodec = new(HashJsonCodec)
			if err := github_com_json_iterator_go.Unmarshal(data[i+1], r.m.HashJsonCodec); err != nil {
				return err
			}
		default:
			structure[string(data[i])] = string(data[i+1])
		}
	}

	// use mapstructure weak decode structure to HashJsonCodec
	return github_com_mitchellh_mapstructure.WeakDecode(structure, r.m)
}

// store HashJsonCodec to redis hash with context and key
func (r *HashJsonCodecRedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// make args
	args := make([]interface{}, 0)

	// add redis key
	args = append(args, key)

	// add redis field and value
	args = append(args, "SomeString", r.m.SomeString)
	args = append(args, "SomeBool", r.m.SomeBool)
	args = append(args, "SomeInt32", r.m.SomeInt32)
	args = append(args, "SomeUint32", r.m.SomeUint32)
	args = append(args, "SomeInt64", r.m.SomeInt64)
	args = append(args, "SomeUint64", r.m.SomeUint64)
	args = append(args, "SomeFloat", r.m.SomeFloat)
	// marshal HashJsonCodec
	if r.m.HashJsonCodec != nil {
		HashJsonCodec, HashJsonCodecError := github_com_json_iterator_go.Marshal(r.m.HashJsonCodec)
		if HashJsonCodecError != nil {
			return HashJsonCodecError
		}
		args = append(args, "HashJsonCodec", HashJsonCodec)
	}

	// use redis hash store HashJsonCodec data with expire second
	err := conn.Send("MULTI")
	if err != nil {
		return err
	}
	err = conn.Send("HMSET", args...)
	if err != nil {
		return err
	}
	err = conn.Send("EXPIRE", key, ttl)
	if err != nil {
		return err
	}
	_, err = conn.Do("EXEC")

	return err
}
