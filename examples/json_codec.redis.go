// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: json_codec.proto

package test

import context "context"
import github_com_gomodule_redigo_redis "github.com/gomodule/redigo/redis"
import github_com_json_iterator_go "github.com/json-iterator/go"
import github_com_mitchellh_mapstructure "github.com/mitchellh/mapstructure"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/galaxyobe/protoc-gen-redis/proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// new StringJsonCodec redis controller with redis pool
func (m *StringJsonCodec) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringJsonCodecRedisController {
	return &StringJsonCodecRedisController{
		pool: pool,
		m:    m,
	}
}

// StringJsonCodec redis controller
type StringJsonCodecRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *StringJsonCodec
}

// new StringJsonCodec redis controller with redis pool
func NewStringJsonCodecRedisController(pool *github_com_gomodule_redigo_redis.Pool) *StringJsonCodecRedisController {
	return &StringJsonCodecRedisController{pool: pool}
}

// get StringJsonCodec
func (r *StringJsonCodecRedisController) StringJsonCodec() *StringJsonCodec {
	return r.m
}

// store StringJsonCodec to redis string with context and key
func (r *StringJsonCodecRedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal StringJsonCodec to []byte
	data, err := github_com_json_iterator_go.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store StringJsonCodec data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load StringJsonCodec from redis string with context and key
func (r *StringJsonCodecRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return github_com_json_iterator_go.Unmarshal(data, r.m)
}

// new HashJsonCodec redis controller with redis pool
func (m *HashJsonCodec) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *HashJsonCodecRedisController {
	return &HashJsonCodecRedisController{
		pool: pool,
		m:    m,
	}
}

// HashJsonCodec redis controller
type HashJsonCodecRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *HashJsonCodec
}

// new HashJsonCodec redis controller with redis pool
func NewHashJsonCodecRedisController(pool *github_com_gomodule_redigo_redis.Pool) *HashJsonCodecRedisController {
	return &HashJsonCodecRedisController{pool: pool}
}

// get HashJsonCodec
func (r *HashJsonCodecRedisController) HashJsonCodec() *HashJsonCodec {
	return r.m
}

// load HashJsonCodec from redis hash with context and key
func (r *HashJsonCodecRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis hash
	data, err := github_com_gomodule_redigo_redis.ByteSlices(conn.Do("HGETALL", key))
	if err != nil {
		return err
	}

	// parse redis hash field name and value
	structure := make(map[string]interface{})
	for i := 0; i < len(data); i += 2 {
		switch string(data[i]) {
		case "HashJsonCodec":
			// unmarshal HashJsonCodec
			r.m.HashJsonCodec = new(HashJsonCodec)
			if err := github_com_json_iterator_go.Unmarshal(data[i+1], r.m.HashJsonCodec); err != nil {
				return err
			}
		default:
			structure[string(data[i])] = string(data[i+1])
		}
	}

	// use mapstructure weak decode structure to HashJsonCodec
	return github_com_mitchellh_mapstructure.WeakDecode(structure, r.m)
}

// store HashJsonCodec to redis hash with context and key
func (r *HashJsonCodecRedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// make args
	args := make([]interface{}, 0)

	// add redis key
	args = append(args, key)

	// add redis field and value
	args = append(args, "SomeString", r.m.SomeString)
	args = append(args, "SomeBool", r.m.SomeBool)
	args = append(args, "SomeInt32", r.m.SomeInt32)
	args = append(args, "SomeUint32", r.m.SomeUint32)
	args = append(args, "SomeInt64", r.m.SomeInt64)
	args = append(args, "SomeUint64", r.m.SomeUint64)
	args = append(args, "SomeFloat", r.m.SomeFloat)
	// marshal HashJsonCodec
	if r.m.HashJsonCodec != nil {
		HashJsonCodec, HashJsonCodecError := github_com_json_iterator_go.Marshal(r.m.HashJsonCodec)
		if HashJsonCodecError != nil {
			return HashJsonCodecError
		}
		args = append(args, "HashJsonCodec", HashJsonCodec)
	}

	// use redis hash store HashJsonCodec data with expire second
	err := conn.Send("MULTI")
	if err != nil {
		return err
	}
	err = conn.Send("HMSET", args...)
	if err != nil {
		return err
	}
	err = conn.Send("EXPIRE", key, ttl)
	if err != nil {
		return err
	}
	_, err = conn.Do("EXEC")

	return err
}

// get HashJsonCodec SomeString field value with key
func (r *HashJsonCodecRedisController) GetSomeString(key string) (SomeString string, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeString field
	if value, err := github_com_gomodule_redigo_redis.String(conn.Do("HGET", key, "SomeString")); err != nil {
		return SomeString, err
	} else {
		r.m.SomeString = value
	}

	return r.m.SomeString, nil
}

// set HashJsonCodec SomeString field with key and SomeString
func (r *HashJsonCodecRedisController) SetSomeString(key string, SomeString string) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeString field
	r.m.SomeString = SomeString
	_, err = conn.Do("HSET", key, "SomeString", SomeString)

	return
}

// get HashJsonCodec SomeBool field value with key
func (r *HashJsonCodecRedisController) GetSomeBool(key string) (SomeBool bool, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeBool field
	if value, err := github_com_gomodule_redigo_redis.Bool(conn.Do("HGET", key, "SomeBool")); err != nil {
		return SomeBool, err
	} else {
		r.m.SomeBool = value
	}

	return r.m.SomeBool, nil
}

// set HashJsonCodec SomeBool field with key and SomeBool
func (r *HashJsonCodecRedisController) SetSomeBool(key string, SomeBool bool) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeBool field
	r.m.SomeBool = SomeBool
	_, err = conn.Do("HSET", key, "SomeBool", SomeBool)

	return
}

// get HashJsonCodec SomeInt32 field value with key
func (r *HashJsonCodecRedisController) GetSomeInt32(key string) (SomeInt32 int32, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeInt32 field
	if value, err := github_com_gomodule_redigo_redis.Int64(conn.Do("HGET", key, "SomeInt32")); err != nil {
		return SomeInt32, err
	} else {
		r.m.SomeInt32 = int32(value)
	}

	return r.m.SomeInt32, nil
}

// set HashJsonCodec SomeInt32 field with key and SomeInt32
func (r *HashJsonCodecRedisController) SetSomeInt32(key string, SomeInt32 int32) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeInt32 field
	r.m.SomeInt32 = SomeInt32
	_, err = conn.Do("HSET", key, "SomeInt32", SomeInt32)

	return
}

// get HashJsonCodec SomeUint32 field value with key
func (r *HashJsonCodecRedisController) GetSomeUint32(key string) (SomeUint32 uint32, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeUint32 field
	if value, err := github_com_gomodule_redigo_redis.Uint64(conn.Do("HGET", key, "SomeUint32")); err != nil {
		return SomeUint32, err
	} else {
		r.m.SomeUint32 = uint32(value)
	}

	return r.m.SomeUint32, nil
}

// set HashJsonCodec SomeUint32 field with key and SomeUint32
func (r *HashJsonCodecRedisController) SetSomeUint32(key string, SomeUint32 uint32) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeUint32 field
	r.m.SomeUint32 = SomeUint32
	_, err = conn.Do("HSET", key, "SomeUint32", SomeUint32)

	return
}

// get HashJsonCodec SomeInt64 field value with key
func (r *HashJsonCodecRedisController) GetSomeInt64(key string) (SomeInt64 int64, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeInt64 field
	if value, err := github_com_gomodule_redigo_redis.Int64(conn.Do("HGET", key, "SomeInt64")); err != nil {
		return SomeInt64, err
	} else {
		r.m.SomeInt64 = value
	}

	return r.m.SomeInt64, nil
}

// set HashJsonCodec SomeInt64 field with key and SomeInt64
func (r *HashJsonCodecRedisController) SetSomeInt64(key string, SomeInt64 int64) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeInt64 field
	r.m.SomeInt64 = SomeInt64
	_, err = conn.Do("HSET", key, "SomeInt64", SomeInt64)

	return
}

// get HashJsonCodec SomeUint64 field value with key
func (r *HashJsonCodecRedisController) GetSomeUint64(key string) (SomeUint64 uint64, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeUint64 field
	if value, err := github_com_gomodule_redigo_redis.Uint64(conn.Do("HGET", key, "SomeUint64")); err != nil {
		return SomeUint64, err
	} else {
		r.m.SomeUint64 = value
	}

	return r.m.SomeUint64, nil
}

// set HashJsonCodec SomeUint64 field with key and SomeUint64
func (r *HashJsonCodecRedisController) SetSomeUint64(key string, SomeUint64 uint64) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeUint64 field
	r.m.SomeUint64 = SomeUint64
	_, err = conn.Do("HSET", key, "SomeUint64", SomeUint64)

	return
}

// get HashJsonCodec SomeFloat field value with key
func (r *HashJsonCodecRedisController) GetSomeFloat(key string) (SomeFloat float32, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get SomeFloat field
	if value, err := github_com_gomodule_redigo_redis.Float64(conn.Do("HGET", key, "SomeFloat")); err != nil {
		return SomeFloat, err
	} else {
		r.m.SomeFloat = float32(value)
	}

	return r.m.SomeFloat, nil
}

// set HashJsonCodec SomeFloat field with key and SomeFloat
func (r *HashJsonCodecRedisController) SetSomeFloat(key string, SomeFloat float32) (err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// set SomeFloat field
	r.m.SomeFloat = SomeFloat
	_, err = conn.Do("HSET", key, "SomeFloat", SomeFloat)

	return
}

// get HashJsonCodec HashJsonCodec field value with key
func (r *HashJsonCodecRedisController) GetHashJsonCodec(key string) (HashJsonCodec *HashJsonCodec, err error) {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// get HashJsonCodec field
	if value, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("HGET", key, "HashJsonCodec")); err != nil {
		return HashJsonCodec, err
	} else {
		// unmarshal HashJsonCodec
		r.m.HashJsonCodec = new(HashJsonCodec)
		if err = github_com_json_iterator_go.Unmarshal(value, r.m.HashJsonCodec); err != nil {
			return HashJsonCodec, err
		}
	}

	return r.m.HashJsonCodec, nil
}

// set HashJsonCodec HashJsonCodec field with key and HashJsonCodec
func (r *HashJsonCodecRedisController) SetHashJsonCodec(key string, HashJsonCodec *HashJsonCodec) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal HashJsonCodec
	if r.m.HashJsonCodec != nil {
		r.m.HashJsonCodec = HashJsonCodec
		if data, err := github_com_json_iterator_go.Marshal(r.m.HashJsonCodec); err != nil {
			return err
		} else {
			// set HashJsonCodec field
			_, err = conn.Do("HSET", key, "HashJsonCodec", data)
			return err
		}
	}

	return nil
}
