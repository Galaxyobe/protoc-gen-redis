// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enabled_ttl.proto

package test

import context "context"
import github_com_gomodule_redigo_redis "github.com/gomodule/redigo/redis"
import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/galaxyobe/protoc-gen-redis/proto"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// new EnabledWithTTL redis controller with redis pool
func (m *EnabledWithTTL) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithTTLRedisController {
	return &EnabledWithTTLRedisController{
		pool: pool,
		m:    m,
	}
}

// EnabledWithTTL redis controller
type EnabledWithTTLRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *EnabledWithTTL
}

// new EnabledWithTTL redis controller with redis pool
func NewEnabledWithTTLRedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithTTLRedisController {
	return &EnabledWithTTLRedisController{pool: pool}
}

// get EnabledWithTTL
func (r *EnabledWithTTLRedisController) EnabledWithTTL() *EnabledWithTTL {
	return r.m
}

// store EnabledWithTTL to redis string with context and key
func (r *EnabledWithTTLRedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal EnabledWithTTL to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store EnabledWithTTL data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load EnabledWithTTL from redis string with context and key
func (r *EnabledWithTTLRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return proto.Unmarshal(data, r.m)
}

// new EnabledWithTTL1 redis controller with redis pool
func (m *EnabledWithTTL1) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithTTL1RedisController {
	return &EnabledWithTTL1RedisController{
		pool: pool,
		m:    m,
	}
}

// EnabledWithTTL1 redis controller
type EnabledWithTTL1RedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *EnabledWithTTL1
}

// new EnabledWithTTL1 redis controller with redis pool
func NewEnabledWithTTL1RedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithTTL1RedisController {
	return &EnabledWithTTL1RedisController{pool: pool}
}

// get EnabledWithTTL1
func (r *EnabledWithTTL1RedisController) EnabledWithTTL1() *EnabledWithTTL1 {
	return r.m
}

// store EnabledWithTTL1 to redis string with context and key
func (r *EnabledWithTTL1RedisController) Store(ctx context.Context, key string, ttl uint64) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal EnabledWithTTL1 to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store EnabledWithTTL1 data with expire second
	_, err = conn.Do("SETEX", key, ttl, data)

	return err
}

// load EnabledWithTTL1 from redis string with context and key
func (r *EnabledWithTTL1RedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return proto.Unmarshal(data, r.m)
}

// new EnabledWithoutTTL redis controller with redis pool
func (m *EnabledWithoutTTL) RedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithoutTTLRedisController {
	return &EnabledWithoutTTLRedisController{
		pool: pool,
		m:    m,
	}
}

// EnabledWithoutTTL redis controller
type EnabledWithoutTTLRedisController struct {
	pool *github_com_gomodule_redigo_redis.Pool
	m    *EnabledWithoutTTL
}

// new EnabledWithoutTTL redis controller with redis pool
func NewEnabledWithoutTTLRedisController(pool *github_com_gomodule_redigo_redis.Pool) *EnabledWithoutTTLRedisController {
	return &EnabledWithoutTTLRedisController{pool: pool}
}

// get EnabledWithoutTTL
func (r *EnabledWithoutTTLRedisController) EnabledWithoutTTL() *EnabledWithoutTTL {
	return r.m
}

// store EnabledWithoutTTL to redis string with context and key
func (r *EnabledWithoutTTLRedisController) Store(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// marshal EnabledWithoutTTL to []byte
	data, err := proto.Marshal(r.m)
	if err != nil {
		return err
	}

	// use redis string store EnabledWithoutTTL data
	_, err = conn.Do("SET", key, data)

	return err
}

// load EnabledWithoutTTL from redis string with context and key
func (r *EnabledWithoutTTLRedisController) Load(ctx context.Context, key string) error {
	// redis conn
	conn := r.pool.Get()
	defer conn.Close()

	// load data from redis string
	data, err := github_com_gomodule_redigo_redis.Bytes(conn.Do("GET", key))
	if err != nil {
		return err
	}

	// unmarshal data to StringStorageType
	return proto.Unmarshal(data, r.m)
}
